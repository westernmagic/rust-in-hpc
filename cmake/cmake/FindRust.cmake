include (FindPackageHandleStandardArgs)

if (CMAKE_HOST_WIN32)
	set (USER_HOME "$ENV{USERPROFILE}")
else ()
	set (USER_HOME "$ENV{HOME}")
endif ()

if (NOT DEFINED CARGO_HOME)
	if ("$ENV{CARGO_HOME}" STREQUAL "")
		set (CARGO_HOME "$ENV{USER_HOME}/.cargo")
	else ()
		set (CARGO_HOME "$ENV{CARGO_HOME}")
	endif ()
endif ()

find_program (
	RUSTUP_EXECUTABLE
	NAMES rustup
	CMAKE_FIND_ROOT_PATH_BOTH
)

function (find_component COMPONENT)
	string (TOLOWER "${COMPONENT}" COMPONENT_LOWER)
	string (TOUPPER "${COMPONENT}" COMPONENT_UPPER)

	if (RUSTUP_EXECUTABLE)
		execute_process (
			COMMAND ${RUSTUP_EXECUTABLE} which ${COMPONENT_LOWER}
			WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
			RESULT_VARIABLE COMPONENT_FOUND
			OUTPUT_VARIABLE COMPONENT_EXECUTABLE
		)

		string (STRIP "${COMPONENT_EXECUTABLE}" COMPONENT_EXECUTABLE)

		if (${COMPONENT_FOUND} EQUAL 0 AND EXISTS "${COMPONENT_EXECUTABLE}")
			set (${COMPONENT_UPPER}_EXECUTABLE "${COMPONENT_EXECUTABLE}" CACHE FILEPATH "Path to a program.")
		endif ()
	endif ()

	find_program (
		${COMPONENT_UPPER}_EXECUTABLE
		NAMES ${COMPONENT_LOWER}
		HINTS "${CARGO_HOME}"
		PATH_SUFFIXES "bin"
		CMAKE_FIND_ROOT_PATH_BOTH
	)

	mark_as_advanced (${COMPONENT_UPPER}_EXECUTABLE)

	if (EXISTS "${${COMPONENT_UPPER}_EXECUTABLE}")
		set (Rust_${COMPONENT_UPPER}_FOUND TRUE PARENT_SCOPE)

		execute_process (
			COMMAND ${${COMPONENT_UPPER}_EXECUTABLE} --version
			OUTPUT_VARIABLE COMPONENT_VERSION
		)

		if ("${COMPONENT_VERSION}" MATCHES "${COMPONENT_LOWER} ([0-9]+)\\.([0-9]+)\\.([0-9]+)")
			set (${COMPONENT_UPPER}_VERSION_MAJOR "${CMAKE_MATCH_1}" PARENT_SCOPE)
			set (${COMPONENT_UPPER}_VERSION_MINOR "${CMAKE_MATCH_2}" PARENT_SCOPE)
			set (${COMPONENT_UPPER}_VERSION_PATCH "${CMAKE_MATCH_3}" PARENT_SCOPE)
			set (${COMPONENT_UPPER}_VERSION "${${COMPONENT_UPPER}_VERSION_MAJOR}.${${COMPONENT_UPPER}_VERSION_MINOR}.${COMPONENT_UPPER}_VERSION_PATCH}" PARENT_SCOPE)
		endif ()
	endif ()
endfunction ()

if (NOT RUST_FIND_COMPONENTS)
	set (RUST_FIND_COMPONENTS CARGO RUSTC RUSTDOC RUSTFMT)
endif ()

foreach (COMPONENT IN ITEMS ${RUST_FIND_COMPONENTS})
	find_component (${COMPONENT})
endforeach ()

find_package_handle_standard_args (
	Rust
	REQUIRED_VARS
		CARGO_EXECUTABLE
		RUSTC_EXECUTABLE
		RUSTDOC_EXECUTABLE
		RUSTFMT_EXECUTABLE
	HANDLE_COMPONENTS
)
